#!/usr/bin/python3

#
# curl -s -L -H "X-Cisco-Meraki-API-Key: $apikey" -X GET -H 'Content-Type: application/json' 'https://dashboard.meraki.com/api/v0/organizations' | jq '.'
#
#

import getopt, sys, os, os.path
import json
import yaml
import re
import requests

verbose = False
apikey = ''
orgid = ''
networkToList = ''
configfile = '/usr/local/etc/meraki.yaml'
addsubnet = False
subnet = ''
subnetname = ''
device = ''
duration = 7200 # default 2 hours
networkFilter = ''
gateway = ''
listhubs = False

def getJson(key, url):

    headers = {}
    headers['Content-Type'] = 'application/json'
    headers['X-Cisco-Meraki-API-Key'] = key

    try:
        r = requests.get(url, headers=headers)
    except requests.exceptions.RequestException as e:
        print("Error: %s" % (e))
        return False
    except KeyboardInterrupt:
        print("Aborted")
        sys.exit(25)

    if verbose:
        print("r.status_code = %s" % (r.status_code))
        print("r.text = %s" % (r.text))

    if r.status_code == 400:
        if verbose:
            print("400 Bad request: %s : %s" % (url, r.text))
        return False
    if r.status_code == 404:
        print("404 Not found: %s" % (url))
        return False
    if r.status_code != 200:
        print("Error: %s - %s" % (r.status_code, r.text))
        return False

    data = json.loads(r.text)

    return data

def postJson(key, url, parameters):

    headers = {}
    headers['Content-Type'] = 'application/json'
    headers['X-Cisco-Meraki-API-Key'] = key

    try:
        r = requests.post(url, json=parameters, headers=headers)
    except requests.exceptions.RequestException as e:
        print("Error: %s" % (e))
        return False

    if verbose:
        print("r.status_code = %s" % (r.status_code))
        print("r.text = %s" % (r.text))

    if r.status_code == 404:
        print("404 Not found: %s" % (url))
        return False
    if r.status_code != 201:
        print("Error: %s - %s" % (r.status_code, r.text))
        return False
    return True

# Clients

def getClients(key, deviceId, duration):
    url = "https://dashboard.meraki.com/api/v0/devices/%s/clients?timespan=%d" % (deviceId, duration)
    return getJson(key, url)

# Devices

def getDevices(key, networkId):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/devices" % (networkId)
    return getJson(key, url)

def getLldpCdp(key, networkId, serial):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/devices/%s/lldp_cdp?timespan=7200" % (networkId, serial)
    return getJson(key, url)

# MX L3 firewall

def getL3FirewallRules(key, networkId):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/l3FirewallRules" % (networkId)
    return getJson(key, url)

# Networks

def getNetworks(key, orgid):
    url = "https://dashboard.meraki.com/api/v0/organizations/%s/networks" % (orgid)
    return getJson(key, url)

def getSiteToSiteVpn(key, networkId):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/siteToSiteVpn" % (networkId)
    return getJson(key, url)

def getSiteToSiteVpnSubnetsAsHash(key, networkId):
    siteToSiteVpns = getSiteToSiteVpn(key, networkId)
    hashed = {}
    if siteToSiteVpns and ('subnets' in siteToSiteVpns):
        for subnet in siteToSiteVpns['subnets']:
            hashed[subnet['localSubnet']] = subnet
    return hashed

# Organizations

def getOrganizations(key):
    url = "https://dashboard.meraki.com/api/v0/organizations"
    return getJson(key, url)

# SSIDs

def getSSIDs(key, networkId):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/ssids" % (networkId)
    return getJson(key, url)

# Static routes

def getStaticRoutes(key, networkId):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/staticRoutes" % (networkId)
    return getJson(key, url)

# VLANs

def getVlans(key, networkId):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/vlans" % (networkId)
    return getJson(key, url)

def addStaticRoute(key, networkId, subnet, subnetname, gatewayIp):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/staticRoutes" % (networkId)
    parameters = {}
    parameters['name'] = subnetname
    parameters['subnet'] = subnet
    parameters['gatewayIp'] = gatewayIp
    parameters['enabled'] = True
    parameters['active'] = 'always'
    return postJson(key, url, parameters)

def findDevice(apikey, orgid, networkName, deviceName):
    network = findNetwork(apikey, orgid, networkName)
    if network is False:
        print("Unable to find network: %s" % (networkName))
        return False
    devices = getDevices(apikey, network['id'])
    if devices is False:
        print("Unable to get devices: %s" % (networkName))
        return False
    for device in devices:
        if verbose:
            print("Testing device %s, %s" % (device, deviceName))
        if device['name'].lower() == deviceName.lower():
            return device
    return False

def findNetwork(apikey, orgid, networkName):
    networks = getNetworks(apikey, orgid)
    for network in networks:
        if verbose:
            print("Network: %s" % (network['name']))
        if network['name'].lower() == networkName.lower():
            return network
    return False

def findHub(networks, hubId):
    for network in networks:
        if network['id'] == hubId:
            return network['name']
    return hubId

def listSiteToSiteVpn(apikey, orgid, listhubs):
    networks = getNetworks(apikey, orgid)

    if len(networkFilter):
        filterRe = "^" + networkFilter + ".*"
        regex=re.compile(filterRe,flags=re.IGNORECASE)

    for network in networks:
        if verbose:
            print("Network: %s" % (network['name']))

        if (len(networkFilter) < 1) or \
                (regex.match(network['name'])):

            siteToSiteVpn = getSiteToSiteVpn(apikey, network['id'])
            if siteToSiteVpn:
                if listhubs:
                    if 'hubs' in siteToSiteVpn:
                        for hub in siteToSiteVpn['hubs']:
                            hubName = findHub(networks, hub['hubId'])
                            print("%s,%s,%s" % (network['name'],
                                hubName,
                                hub['useDefaultRoute']))
                else:
                    if 'subnets' in siteToSiteVpn:
                        for subnet in siteToSiteVpn['subnets']:
                            print("%s,%s,%s" % (network['name'],
                                subnet['localSubnet'],
                                subnet['useVpn']))

def listL3FirewallRules(apikey, orgid):
    if (len(networkToList) < 1):
        print("Please specify a network.")
        return
    network = findNetwork(apikey, orgid, networkToList)
    if network is False:
        print("Unable to find network: %s" % (networkToList))
        return
    l3FirewallRules = getL3FirewallRules(apikey, network['id'])
    line = 1
    for l3FirewallRule in l3FirewallRules:
        print("%d,%s,%s,%s,%s,%s,%s,'%s',%s" % (line, l3FirewallRule['policy'], l3FirewallRule['protocol'], \
            l3FirewallRule['srcCidr'], l3FirewallRule['srcPort'], \
            l3FirewallRule['destCidr'], l3FirewallRule['destPort'], \
            l3FirewallRule['comment'], l3FirewallRule['syslogEnabled']))
        line += 1

def listSSIDs(key, orgid, networkName):

    networks = getNetworks(key, orgid)
    for network in networks:
        if verbose:
            print("Network: %s (%s)" % (network['name'], networkName))

        if len(networkName) and (networkName.lower() != network['name'].lower()):
            continue

        ssids = getSSIDs(key, network['id'])
        if ssids:
            for ssid in ssids:
                if verbose:
                    print("ssid: %s" % (ssid['name']))
                print("{},{},{},{},'{}'".format(network['name'], ssid['name'], \
                    ssid['enabled'], ssid['authMode'], ssid['ipAssignmentMode']))

def listStaticRoutes(key, orgid):
    networks = getNetworks(apikey, orgid)
    for network in networks:
        if verbose:
            print("Network: %s" % (network['name']))

        if (len(networkToList) < 1) or \
                (networkToList.lower() == network['name'].lower()):
            staticRoutes = getStaticRoutes(apikey, network['id'])
            if verbose:
                print("staticRoutes: %s" % (staticRoutes))
#            if staticRoutes is False:
#                continue
            siteToSiteVpnSubnets = getSiteToSiteVpnSubnetsAsHash(key, network['id'])
            for staticRoute in staticRoutes:
                if verbose:
                    print("  staticRoute: %s" % (staticRoute))
                invpn = ''
                if staticRoute['subnet'] in siteToSiteVpnSubnets:
                    useVpn = siteToSiteVpnSubnets[staticRoute['subnet']]['useVpn']
                    if useVpn:
                        invpn = 'yes'
                    else:
                        invpn = 'no'

                print("%s,%s,'%s',%s,%s,%s" % (network['name'], staticRoute['subnet'], staticRoute['name'], staticRoute['gatewayIp'], staticRoute['enabled'], invpn))
            if len(networkToList):
                return

def listOrganizations(key):
    organizations = getOrganizations(key)
    if organizations == False:
        print("Unable to getOrganizations.  Wrong apikey?")
        return
    for organization in organizations:
        print("%s,'%s'" % (organization['id'], organization['name']))

def listClients(apikey, orgid, networkName, deviceName):
    if len(networkName)<1:
        print("Please provide a network.")
        return False
    network = findNetwork(apikey, orgid, networkName)
    if network == False:
        print("Cannot find network: " % (networkName))
        return False
    if len(deviceName)<1:
        devices = getDevices(apikey, network['id'])
        if devices == False:
            print("Unable to getDevices.  Wrong apikey?")
            return False

        if len(devices)>1:
            print("More than one device.  Please specify a device.")
            return False
        device = devices[0]
    else:
        device = findDevice(apikey, orgid, networkName, deviceName)
        if device == False:
            print("Unable to find device: %s" % (deviceName))
            return False

    clients = getClients(apikey, device['serial'], duration)
    # {u'dhcpHostname': None, u'description': None, u'switchport': None, u'ip': u'100.122.129.85', u'vlan': 2, u'mac': u'c0:8c:60:6c:7a:37', u'usage': {u'recv': 7.0, u'sent': 0.0}, u'mdnsName': None, u'id': u'z647a8155'}
    for client in clients:
        print("%s,%s,%s,%s,%d,%d,%d" % (network['name'],client['description'],client['ip'], client['mac'], \
                client['vlan'],client['usage']['recv'], client['usage']['sent']))
    return True

def listDevices(key, orgid, networkName):
    networks = getNetworks(key, orgid)

    if len(networkFilter):
        filterRe = "^" + networkFilter + ".*"
        regex=re.compile(filterRe,flags=re.IGNORECASE)

    for network in networks:
        if verbose:
            print("Network: %s (%s)" % (network['name'], networkName))

        if len(networkFilter) and not regex.match(network['name']):
            continue

        devices = getDevices(key, network['id'])
        if devices == False:
            print("Unable to getDevices.  Wrong apikey?")
            return
        for device in devices:
            if verbose:
                print("device: %s" % (device))
            wan1Ip = ''
            if 'wan1Ip' in device:
                wan1Ip = device['wan1Ip']
            wan2Ip = ''
            if 'wan2Ip' in device:
                wan2Ip = device['wan2Ip']
            tags = ''
            if 'tags' in device:
                tags = device['tags']
            print("%s,%s,%s,%s,%s,%s,%s,%s" % (network['name'], device['name'], device['model'], \
                    device['serial'], device['mac'], wan1Ip, wan2Ip, tags))

def listNetworks(key, orgid):
    networks = getNetworks(key, orgid)
    if networks == False:
        print("Unable to getNetworks.  Wrong apikey?")
        return
    networkNames = []

    if len(networkFilter):
        filterRe = "^" + networkFilter + ".*"
        regex=re.compile(filterRe,flags=re.IGNORECASE)

    for network in networks:
#        print("%s" % (network['name']))
        if (len(networkFilter) < 1) or \
                (regex.match(network['name'])):
            networkNames.append(network['name'])
    for name in sorted(networkNames):
        print("{}".format(name))

def listLldpCdpCmd(key, orgid, networkName, whichType):
    networks = getNetworks(key, orgid)
    for network in networks:
        if verbose:
            print("Network: %s (%s)" % (network['name'], networkName))

        if len(networkName) and (networkName.lower() != network['name'].lower()):
            continue

        devices = getDevices(apikey, network['id'])
        for device in devices:
            if verbose:
                print(" Device: %s" % (device['name']))
            lldpCdp = getLldpCdp(apikey, network['id'], device['serial'])
            if 'ports' not in lldpCdp:
                continue
#            {u'wan0': {u'cdp': {u'sourcePort': u'wan0', u'portId': u'TenGigabitEthernet1/1', u'deviceId': u'scng-riv-sw3.axxm.net', u'address': u'10.81.0.11'}}
#                    {u'sourcePort': u'port3', u'portId': u'Gi3/0/12', u'managementAddress': u'10.20.100.1', u'systemName': u'LANG-TOR-DC-STK1.axxm.net'}
            for port in lldpCdp['ports']:
                for neighborType in lldpCdp['ports'][port]:
                    neighbor = lldpCdp['ports'][port][neighborType]
                    ip = ''
                    if 'address' in neighbor:
                        ip = neighbor['address']
                    elif 'managementAddress' in neighbor:
                        ip = neighbor['managementAddress']
                    name = ''
                    if 'deviceId' in neighbor:
                        name = neighbor['deviceId']
                    elif 'systemName' in neighbor:
                        name = neighbor['systemName']

                    print("%s,%s,%s,%s,%s" % (network['name'],neighbor['sourcePort'],\
                            neighbor['portId'], name, ip))
            if len(networkToList):
                return

def listVlans(apikey, orgid, networkName):
    networks = getNetworks(apikey, orgid)
    for network in networks:
        if verbose:
            print("Network: %s (%s)" % (network['name'], networkName))

        if len(networkName) and (networkName.lower() != network['name'].lower()):
            continue

        vlans = getVlans(apikey, network['id'])
        if vlans:
            for vlan in vlans:
                if verbose:
                    print(" vlan: %s" % (vlan['name']))
                print("%s,%d,%s,%s,'%s'" % (network['name'], vlan['id'], \
                    vlan['subnet'], vlan['applianceIp'], vlan['name']))

def staticRoutesCmd(apikey, orgid):
    if addsubnet:
        if len(subnet) < 1:
            print("Missing subnet")
            sys.exit(5)
        p = re.compile('\d+\.\d+\.\d+\.\d+/\d+')
        if not p.match(subnet):
            print("Bad subnet format: %s" % (subnet))
            sys.exit(6)

        if len(subnetname) < 1:
            print("Missing subnet name")
            sys.exit(5)

        if len(gateway) < 1:
            print("Missing gateway")
            sys.exit(5)
        p = re.compile('\d+\.\d+\.\d+\.\d+')
        if not p.match(gateway):
            print("Bad gateway format: %s" % (gateway))
            sys.exit(61)

        if len(networkToList) < 1:
            print("Missing network")
            sys.exit(5)

        network = findNetwork(apikey, orgid, networkToList)
        if network == False:
            print("Cannot find network: " % (networkToList))
            sys.exit(7)
        if verbose:
            print(" Network id = %s" % (network['id']))
        addStaticRoute(apikey, network['id'], subnet, subnetname, gateway)
    else:
        listStaticRoutes(apikey, orgid)

if 'MERAKI_APIKEY' in os.environ:
    apikey = os.environ['MERAKI_APIKEY']
if 'MERAKI_ORGID' in os.environ:
    orgid = os.environ['MERAKI_ORGID']

if len(sys.argv) < 2:
    print("Please provide a command: cdp clients devices lldp lldpcdp networks sitetositevpn ssids staticroutes vlans")
    sys.exit(1)

options, remainder = getopt.getopt(sys.argv[2:], 's:v', ['add', 'apikey=',
                                                         'device=',
                                                         'duration=',
                                                         'filter=',
                                                         'gateway=',
                                                         'hubs',
                                                         'name=', 'network=',
                                                         'orgid=',
                                                         'subnet=',
                                                         'verbose',
                                                         ])
for opt, arg in options:
    if opt in ('--add'):
        addsubnet = True
    elif opt in ('--apikey'):
        apikey = arg
    elif opt in ('--device'):
        device = arg
    elif opt in ('--duration'):
        duration = abs(int(arg))
        # if greater than a month, then truncate to a month
        if duration > 2592000:
            duration = 2592000
    elif opt in ('--filter'):
        networkFilter = arg
    elif opt in ('--gateway'):
        gateway = arg
    elif opt in ('--hubs'):
        listhubs = True
    elif opt in ('--name'):
        subnetname = arg
    elif opt in ('--network'):
        networkToList = arg
    elif opt in ('--orgid'):
        orgid = arg
    elif opt in ('-s', '--subnet'):
        subnet = arg
    elif opt in ('-v', '--verbose'):
        verbose = True

cmd = sys.argv[1]

if os.path.isfile(configfile):
    with open(configfile) as fp:
        configuration = yaml.load(fp)
        if 'apikey' in configuration:
            apikey = configuration['apikey']
        if 'orgid' in configuration:
            orgid = configuration['orgid']

if len(apikey) < 1:
    print("Missing apikey")
    sys.exit(3)

if len(orgid) < 1:
    organizations = getOrganizations(apikey)
    if organizations == False:
        print("Unable to getOrganizations.  Wrong apikey?")
        sys.exit(66)

    if len(organizations) > 1:
        print("APIKEY is associated with more than one orgid.  Please specify only one with --orgid.")
        for organization in organizations:
            print("%s,'%s'" % (organization['id'], organization['name']))
        sys.exit(3)

    if len(orgid) < 1:
        orgid = organizations[0]['id']
    else:
        print("Unable to fetch orgid.")
        sys.exit(4)

if cmd == "staticroutes":
    staticRoutesCmd(apikey, orgid)
elif (cmd == "cdp") or (cmd == "lldp") or (cmd == "lldpcdp"):
    listLldpCdpCmd(apikey, orgid, networkToList, cmd)
elif cmd == "clients":
    listClients(apikey, orgid, networkToList, device)
elif cmd == "devices":
    listDevices(apikey, orgid, networkToList)
elif cmd == "networks":
    listNetworks(apikey, orgid)
elif cmd == "organizations":
    listOrganizations(apikey)
elif cmd == "l3firewallrules":
    listL3FirewallRules(apikey, orgid)
elif cmd == "sitetositevpn":
    listSiteToSiteVpn(apikey, orgid, listhubs)
elif cmd == "ssids":
    listSSIDs(apikey, orgid, networkToList)
elif cmd == "vlans":
    listVlans(apikey, orgid, networkToList)
else:
    print("Unknown command: %s" % (cmd))

