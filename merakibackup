#!/usr/bin/env python3

"""
merakibackup.py

Iterates through all organizations and networks visable to the APIKEY,
retreives data from all known API endpoints and then outputs as
a single JSON array.

Before running the script, it's best to put the APIKEY
into the MERAKI_DASHBOARD_API_KEY environment variable.  Otherwise
use the less security --apikey option.

export MERAKI_DASHBOARD_API_KEY="the_api_key_here"

curl -s -L -H "X-Cisco-Meraki-API-Key: $MERAKI_DASHBOARD_API_KEY" -X GET \
 -H 'Content-Type: application/json' 'https://dashboard.meraki.com/api/v0/organizations' | jq '.'

"""

import getopt
import json
import os
import re
import sys

import meraki


class MerakiBackup:
    """
    Create a backup JSON of a Meraki dashboard
    """
    def __init__(self, verbose=False):
        self.configuration = {}
        self.verbose = verbose
        self.debug = False
        self.apikey = None
        self.output_filename = None
        self.dashboard = None

    def getNetworkVlans(self, networkId: str) -> dict:
        try:
            return self.dashboard.vlans.getNetworkVlans(networkId)
        except meraki.exceptions.APIError:
            return None

    def getNetworkStaticRoutes(self, networkId: str) -> dict:
        try:
            return self.dashboard.mx_static_routes.getNetworkStaticRoutes(networkId)
        except meraki.exceptions.APIError:
            return None

    def getNetworkSsids(self, networkId: str) -> dict:
        try:
            return self.dashboard.ssids.getNetworkSsids(networkId)
        except meraki.exceptions.APIError:
            return None

    def getNetworkDeviceLldp_cdp(self, networkId: str, serial: str) -> dict:
        try:
            return self.dashboard.devices.getNetworkDeviceLldp_cdp(networkId, serial, timespan=10800)
        except meraki.exceptions.APIError:
            return None

    def getNetworkWirelessSettings(self, networkId: str) -> dict:
        try:
            return self.dashboard.wireless_settings.getNetworkWirelessSettings(networkId)
        except meraki.exceptions.APIError:
            return None

    def getNetworkSecurityIntrusionSettings(self, networkId: str) -> dict:
        try:
            return self.dashboard.intrusion_settings.getNetworkSecurityIntrusionSettings(networkId)
        except meraki.exceptions.APIError:
            return None

    def getNetworkConnectivityMonitoringDestinations(self, networkId: str) -> dict:
        try:
            return self.dashboard.connectivity_monitoring_destinations.getNetworkConnectivityMonitoringDestinations(networkId)
        except meraki.exceptions.APIError:
            return None

    def getNetworkVlansEnabledState(self, networkId: str) -> dict:
        try:
            return self.dashboard.vlans.getNetworkVlansEnabledState(networkId)
        except meraki.exceptions.APIError:
            return None

    def getNetworkFirewalledServices(self, networkId: str) -> dict:
        try:
            return self.dashboard.firewalled_services.getNetworkFirewalledServices(networkId)
        except meraki.exceptions.APIError:
            return None

    def getNetworkSiteToSiteVpn(self, networkId: str) -> dict:
        try:
            return self.dashboard.networks.getNetworkSiteToSiteVpn(networkId)
        except meraki.exceptions.APIError:
            return None

    def getNetworkL3FirewallRules(self, networkId: str) -> dict:
        try:
            return self.dashboard.mx_l3_firewall.getNetworkL3FirewallRules(networkId)
        except meraki.exceptions.APIError:
            return None

    def getNetworkGroupPolicies(self, networkId: str) -> dict:
        try:
            return self.dashboard.group_policies.getNetworkGroupPolicies(networkId)
        except meraki.exceptions.APIError:
            return None

    def getNetworkSecurityMalwareSettings(self, networkId: str) -> dict:
        try:
            return self.dashboard.malware_settings.getNetworkSecurityMalwareSettings(networkId)
        except meraki.exceptions.APIError:
            return None

    def getNetworkWarmSpareSettings(self, networkId: str) -> dict:
        try:
            return self.dashboard.mx_warm_spare_settings.getNetworkWarmSpareSettings(networkId)
        except meraki.exceptions.APIError:
            return None

    def getNetworkL7FirewallRulesApplicationCategories(self, networkId: str) -> dict:
        try:
            return self.dashboard.mx_l7_application_categories.getNetworkL7FirewallRulesApplicationCategories(networkId)
        except meraki.exceptions.APIError:
            return None

    def getNetworkContentFiltering(self, networkId: str) -> dict:
        try:
            return self.dashboard.content_filtering_rules.getNetworkContentFiltering(networkId)
        except meraki.exceptions.APIError:
            return None

    def getNetworkOneToOneNatRules(self, networkId: str) -> dict:
        try:
            return self.dashboard.mx_1_1_nat_rules.getNetworkOneToOneNatRules(networkId)
        except meraki.exceptions.APIError:
            return None

    def getNetworkOneToManyNatRules(self, networkId: str) -> dict:
        try:
            return self.dashboard.mx_1_many_nat_rules.getNetworkOneToManyNatRules(networkId)
        except meraki.exceptions.APIError:
            return None

    def getNetworkPortForwardingRules(self, networkId: str) -> dict:
        try:
            return self.dashboard.mx_port_forwarding_rules.getNetworkPortForwardingRules(networkId)
        except meraki.exceptions.APIError:
            return None

    def getNetworkSnmpSettings(self, networkId: str) -> dict:
        try:
            return self.dashboard.snmp_settings.getNetworkSnmpSettings(networkId)
        except meraki.exceptions.APIError:
            return None

    def getNetworkDeviceManagementInterfaceSettings(self, networkId: str, serial: str) -> dict:
        try:
            return self.dashboard.management_interface_settings.getNetworkDeviceManagementInterfaceSettings(networkId, serial)
        except meraki.exceptions.APIError:
            return None

    def backup(self, only_organization_id: None, networkFilter: str):

        if networkFilter:
            filterRe = "^" + networkFilter + ".*"
            regex = re.compile(filterRe, flags=re.IGNORECASE)

        organizations = self.dashboard.organizations.getOrganizations()
        if not organizations:
            print("No organizations found")
            return

        for organization in organizations:
            if self.verbose:
                #print("org={}".format(organizations))
                print("Organization: {} {}".format(organization['id'], organization['name']))
            if only_organization_id and only_organization_id != organization['id']:
                if self.verbose:
                    print("skipping")
                    continue
            networks = self.dashboard.networks.getOrganizationNetworks(organization['id'])
            if networks:
                for network in networks:
                    if self.verbose:
                        print("Network: {}".format(network['name']))

                    if networkFilter and not regex.match(network['name']):
                        continue

                    alertSettings = self.dashboard.alert_settings.getNetworkAlertSettings(network['id'])
                    network['alertSettings'] = alertSettings

                    httpServers = self.dashboard.http_servers.getNetworkHttpServers(network['id'])
                    network['httpServers'] = httpServers

                    network['connectivityMonitoringDestinations'] = self.getNetworkConnectivityMonitoringDestinations(network['id'])

                    vlansEnabledState = self.getNetworkVlansEnabledState(network['id'])
                    network['vlansEnabledState'] = vlansEnabledState

                    if vlansEnabledState and vlansEnabledState['enabled']:
                        network['vlans'] = self.getNetworkVlans(network['id'])

                    network['firewalledServices'] = self.getNetworkFirewalledServices(network['id'])

                    network['staticRoutes'] = self.getNetworkStaticRoutes(network['id'])

                    network['siteToSiteVpn'] = self.getNetworkSiteToSiteVpn(network['id'])

                    network['l3FirewallRules'] = self.getNetworkL3FirewallRules(network['id'])

                    network['groupPolicies'] = self.getNetworkGroupPolicies(network['id'])

                    network['intrusionSettings'] = self.getNetworkSecurityIntrusionSettings(network['id'])

                    network['malwareSettings'] = self.getNetworkSecurityMalwareSettings(network['id'])

                    network['warmSpareSettings'] = self.getNetworkWarmSpareSettings(network['id'])

                    network['l7ApplicationCategories'] = self.getNetworkL7FirewallRulesApplicationCategories(network['id'])

                    network['ssids'] = self.getNetworkSsids(network['id'])

                    syslogServers = self.dashboard.syslog_servers.getNetworkSyslogServers(network['id'])
                    network['syslogServers'] = syslogServers

                    network['contentFiltering'] = self.getNetworkContentFiltering(network['id'])

                    network['oneToOneNatRules'] = self.getNetworkOneToOneNatRules(network['id'])

                    network['oneToManyNatRules'] = self.getNetworkOneToManyNatRules(network['id'])

                    network['portForwardingRules'] = self.getNetworkPortForwardingRules(network['id'])

                    network['snmp'] = self.getNetworkSnmpSettings(network['id'])

                    network['wirelessSettings'] = self.getNetworkWirelessSettings(network['id'])

                    devices = self.dashboard.devices.getNetworkDevices(network['id'])
                    network['devices'] = devices
                    if devices:
                        for device in devices:
                            device_name = None
                            if 'name' in device:
                                device_name = device['name']
                            if self.verbose:
                                print(" Device: {}".format(device_name))
                            uplink = self.dashboard.devices.getNetworkDeviceUplink(network['id'], device['serial'])
                            device['uplink'] = uplink

                            lldp_cdp = self.getNetworkDeviceLldp_cdp(network['id'], device['serial'])
                            device['lldp_cdp'] = lldp_cdp

                            device['managementInterfaceSettings'] = self.getNetworkDeviceManagementInterfaceSettings(network['id'], device['serial'])

            organization['networks'] = networks

            admins = self.dashboard.admins.getOrganizationAdmins(organization['id'])
            organization['admins'] = admins

            organizationIntrusionSettings = self.dashboard.intrusion_settings.getOrganizationSecurityIntrusionSettings(organization['id'])
            organization['intrusionSettings'] = organizationIntrusionSettings

            vpnFirewallRules = self.dashboard.mx_vpn_firewall.getOrganizationVpnFirewallRules(organization['id'])
            organization['vpnFirewallRules'] = vpnFirewallRules

            thirdPartyVPNPeers = self.dashboard.organizations.getOrganizationThirdPartyVPNPeers(organization['id'])
            organization['thirdPartyVPNPeers'] = thirdPartyVPNPeers

            samlRoles = self.dashboard.saml_roles.getOrganizationSamlRoles(organization['id'])
            organization['samlRoles'] = samlRoles

        if self.output_filename:
            file = open(self.output_filename, "w")
            file.write(json.dumps(organizations, indent=2, sort_keys=True))
            file.close()
            if self.verbose:
                print("Wrote output to {}".format(self.output_filename))
        else:
            print("{}".format(json.dumps(organizations, indent=2, sort_keys=True)))

    def main(self):
        """
        Parse command line options and perform backup.
        """
        organization = None
        networkFilter = None
        options = getopt.getopt(sys.argv[1:],
                                'a:f:o:w:v',
                                [
                                    'apikey=',
                                    'filter=',
                                    'organization=',
                                    'write=',
                                    'verbose',
                                ])[0]

        for opt, arg in options:
            if opt in ('-w', '--write'):
                self.output_filename = arg
            elif opt in ('-a', '--apikey'):
                self.apikey = arg
            elif opt in ('-o', '--organization'):
                organization = arg
            elif opt in ('-f', '--filter'):
                networkFilter = arg
            elif opt in ('-v', '--verbose'):
                self.verbose = True

        if 'MERAKI_APIKEY' in os.environ:
            self.apikey = os.environ['MERAKI_APIKEY']
        if 'MERAKI_DASHBOARD_API_KEY' in os.environ:
            self.apikey = os.environ['MERAKI_DASHBOARD_API_KEY']

        if not self.apikey:
            print("Missing apikey")
            sys.exit(2)

        try:
            self.dashboard = meraki.DashboardAPI(api_key=self.apikey,
                                                 output_log=self.debug,
                                                 print_console=self.debug)
        except meraki.exceptions.APIKeyError as exception:
            print("Error: {}".format(exception))
            return

        self.backup(organization, networkFilter)

if __name__ == "__main__":
    MerakiBackup().main()
