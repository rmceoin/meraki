#!/usr/bin/python

#
# Before running the script, it's best to put the APIKEY
# into the MERAKI_APIKEY environment variable.  Otherwise
# use the less security --apikey option.
#
# export MERAKI_APIKEY="the_api_key_here"
#
# curl -s -L -H "X-Cisco-Meraki-API-Key: $apikey" -X GET -H 'Content-Type: application/json' 'https://dashboard.meraki.com/api/v0/organizations' | jq '.'
#
#

import getopt
import json
import os
import sys
import urllib2

apikey = ''
verbose = False
output_filename = ''

def getOrganizations(key):
    url = "https://dashboard.meraki.com/api/v0/organizations"
    try:
        req = urllib2.Request(url)
        req.add_header('Content-Type', 'application/json')
        req.add_header('X-Cisco-Meraki-API-Key', key)
        resp = urllib2.urlopen(req)
        content = resp.read()
    except urllib2.HTTPError, e:
        print "Failed getting %s with error code %s" % (url, e.code)
        return 0

    data = json.loads(content)
    if len(data) == 0:
        print "Invalid response for %s" % (url)
        return 0

    return data

def getAlertSettings(key, networkId):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/alertSettings" % (networkId)
    try:
        req = urllib2.Request(url)
        req.add_header('Content-Type', 'application/json')
        req.add_header('X-Cisco-Meraki-API-Key', key)
        resp = urllib2.urlopen(req)
        content = resp.read()
    except urllib2.HTTPError, e:

        print "Failed getting %s with error code %s" % (url, e.code)
        return 0

    data = json.loads(content)
    if len(data) == 0:
        print "Invalid response for %s" % (url)
        return 0
    return data

def getVpnFirewallRules(key, orgid):
    url = "https://dashboard.meraki.com/api/v0/organizations/%s/vpnFirewallRules" % (orgid)
    try:
        req = urllib2.Request(url)
        req.add_header('Content-Type', 'application/json')
        req.add_header('X-Cisco-Meraki-API-Key', key)
        resp = urllib2.urlopen(req)
        content = resp.read()
    except urllib2.HTTPError, e:
        if e.code == 404:
            # It appears that if there are none it returns 404
            return False

        print "Failed getting %s with error code %s" % (url, e.code)
        return 0

    data = json.loads(content)
    if len(data) == 0:
        print "Invalid response for %s" % (url)
        return 0
    return data

def getNetworks(key, orgid):
    url = "https://dashboard.meraki.com/api/v0/organizations/%s/networks" % (orgid)
    try:
        req = urllib2.Request(url)
        req.add_header('Content-Type', 'application/json')
        req.add_header('X-Cisco-Meraki-API-Key', key)
        resp = urllib2.urlopen(req)
        content = resp.read()
    except urllib2.HTTPError, e:
        print "Failed getting %s with error code %s" % (url, e.code)
        return 0

    data = json.loads(content)
    if len(data) == 0:
        print "Invalid response for %s" % (url)
        return 0
    return data

def getContentFiltering(key, networkId):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/contentFiltering" % (networkId)
    try:
        req = urllib2.Request(url)
        req.add_header('Content-Type', 'application/json')
        req.add_header('X-Cisco-Meraki-API-Key', key)
        resp = urllib2.urlopen(req)
        content = resp.read()
    except urllib2.HTTPError, e:
        print "Failed getting %s with error code %s" % (url, e.code)
        return 0

    data = json.loads(content)
    if len(data) == 0:
        print "Invalid response for %s" % (url)
        return 0
    return data

def getVlans(key, networkId):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/vlans" % (networkId)
    try:
        req = urllib2.Request(url)
        req.add_header('Content-Type', 'application/json')
        req.add_header('X-Cisco-Meraki-API-Key', key)
        resp = urllib2.urlopen(req)
        content = resp.read()
    except urllib2.HTTPError, e:

        if e.code == 400:
            # { "errors": [ "VLANs are not enabled for this network" ] }
            return False

        print "Failed getting %s with error code %s" % (url, e.code)
        return 0

    data = json.loads(content)
    if len(data) == 0:
        print "Invalid response for %s" % (url)
        return 0
    return data

def getVlansEnabledState(key, networkId):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/vlansEnabledState" % (networkId)
    try:
        req = urllib2.Request(url)
        req.add_header('Content-Type', 'application/json')
        req.add_header('X-Cisco-Meraki-API-Key', key)
        resp = urllib2.urlopen(req)
        content = resp.read()
    except urllib2.HTTPError, e:

        print "Failed getting %s with error code %s" % (url, e.code)
        return 0

    data = json.loads(content)
    if len(data) == 0:
        print "Invalid response for %s" % (url)
        return 0
    return data

def getStaticRoutes(key, networkId):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/staticRoutes" % (networkId)
    try:
        req = urllib2.Request(url)
        req.add_header('Content-Type', 'application/json')
        req.add_header('X-Cisco-Meraki-API-Key', key)
        resp = urllib2.urlopen(req)
        content = resp.read()
    except urllib2.HTTPError, e:

        if e.code == 400:
            return False

        print "Failed getting %s with error code %s" % (url, e.code)
        return 0

    data = json.loads(content)
    return data

def getSiteToSiteVpn(key, networkId):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/siteToSiteVpn" % (networkId)
    try:
        req = urllib2.Request(url)
        req.add_header('Content-Type', 'application/json')
        req.add_header('X-Cisco-Meraki-API-Key', key)
        resp = urllib2.urlopen(req)
        content = resp.read()
    except urllib2.HTTPError, e:

        if e.code == 400:
            return False

        print "Failed getting %s with error code %s" % (url, e.code)
        return 0

    data = json.loads(content)
    return data

def getL3FirewallRules(key, networkId):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/l3FirewallRules" % (networkId)
    try:
        req = urllib2.Request(url)
        req.add_header('Content-Type', 'application/json')
        req.add_header('X-Cisco-Meraki-API-Key', key)
        resp = urllib2.urlopen(req)
        content = resp.read()
    except urllib2.HTTPError, e:

        if e.code == 400:
            return False

        print "Failed getting %s with error code %s" % (url, e.code)
        return 0

    data = json.loads(content)
    return data

def getSsids(key, networkId):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/ssids" % (networkId)
    try:
        req = urllib2.Request(url)
        req.add_header('Content-Type', 'application/json')
        req.add_header('X-Cisco-Meraki-API-Key', key)
        resp = urllib2.urlopen(req)
        content = resp.read()
    except urllib2.HTTPError, e:

        if e.code == 404:
            # It appears that if there are none it returns 404
            return False

        print "Failed getting %s with error code %s" % (url, e.code)
        return 0

    data = json.loads(content)
    return data

def getGroupPolicies(key, networkId):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/groupPolicies" % (networkId)
    try:
        req = urllib2.Request(url)
        req.add_header('Content-Type', 'application/json')
        req.add_header('X-Cisco-Meraki-API-Key', key)
        resp = urllib2.urlopen(req)
        content = resp.read()
    except urllib2.HTTPError, e:

        if e.code == 400:
            return False

        print "Failed getting %s with error code %s" % (url, e.code)
        return 0

    data = json.loads(content)
    return data

def getDevices(key, networkId):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/devices" % (networkId)
    try:
        req = urllib2.Request(url)
        req.add_header('Content-Type', 'application/json')
        req.add_header('X-Cisco-Meraki-API-Key', key)
        resp = urllib2.urlopen(req)
        content = resp.read()
    except urllib2.HTTPError, e:

        print "Failed getting %s with error code %s" % (url, e.code)
        return 0

    data = json.loads(content)
    return data

def getDeviceUplink(key, networkId, serial):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/devices/%s/uplink" % (networkId, serial)
    try:
        req = urllib2.Request(url)
        req.add_header('Content-Type', 'application/json')
        req.add_header('X-Cisco-Meraki-API-Key', key)
        resp = urllib2.urlopen(req)
        content = resp.read()
    except urllib2.HTTPError, e:

        print "Failed getting %s with error code %s" % (url, e.code)
        return 0

    data = json.loads(content)
    return data

def getFirewalledServices(key, networkId):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/firewalledServices" % (networkId)
    try:
        req = urllib2.Request(url)
        req.add_header('Content-Type', 'application/json')
        req.add_header('X-Cisco-Meraki-API-Key', key)
        resp = urllib2.urlopen(req)
        content = resp.read()
    except urllib2.HTTPError, e:

        print "Failed getting %s with error code %s" % (url, e.code)
        return 0

    data = json.loads(content)
    return data

def getSnmp(key, organizationId):
    url = "https://dashboard.meraki.com/api/v0/organizations/%s/snamp" % (organizationId)
    try:
        req = urllib2.Request(url)
        req.add_header('Content-Type', 'application/json')
        req.add_header('X-Cisco-Meraki-API-Key', key)
        resp = urllib2.urlopen(req)
        content = resp.read()
    except urllib2.HTTPError, e:
        if e.code == 404:
            # It appears that if there are none it returns 404
            return False

        print "Failed getting %s with error code %s" % (url, e.code)
        return 0

    data = json.loads(content)
    return data

def getThirdPartyVPNPeers(key, organizationId):
    url = "https://dashboard.meraki.com/api/v0/organizations/%s/thirdPartyVPNPeers" % (organizationId)
    try:
        req = urllib2.Request(url)
        req.add_header('Content-Type', 'application/json')
        req.add_header('X-Cisco-Meraki-API-Key', key)
        resp = urllib2.urlopen(req)
        content = resp.read()
    except urllib2.HTTPError, e:
        if e.code == 404:
            # It appears that if there are none it returns 404
            return False

        print "Failed getting %s with error code %s" % (url, e.code)
        return 0

    data = json.loads(content)
    return data

def getSyslogServers(key, networkId):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/syslogServers" % (networkId)
    try:
        req = urllib2.Request(url)
        req.add_header('Content-Type', 'application/json')
        req.add_header('X-Cisco-Meraki-API-Key', key)
        resp = urllib2.urlopen(req)
        content = resp.read()
    except urllib2.HTTPError, e:

        print "Failed getting %s with error code %s" % (url, e.code)
        return 0

    data = json.loads(content)
    return data

def getSamlRoles(key, organizationId):
    url = "https://dashboard.meraki.com/api/v0/organizations/%s/samlRoles" % (organizationId)
    try:
        req = urllib2.Request(url)
        req.add_header('Content-Type', 'application/json')
        req.add_header('X-Cisco-Meraki-API-Key', key)
        resp = urllib2.urlopen(req)
        content = resp.read()
    except urllib2.HTTPError, e:
        if e.code == 404:
            # It appears that if there are none it returns 404
            return False

        print "Failed getting %s with error code %s" % (url, e.code)
        return 0

    data = json.loads(content)
    return data

options, remainder = getopt.getopt(sys.argv[1:], 'a:o:v', ['output=', 
    'apikey=',
    'verbose',
    ])
for opt, arg in options:
    if opt in ('-o', '--output'):
        output_filename = arg
    elif opt in ('-a', '--apikey'):
        apikey = arg
    elif opt in ('-v', '--verbose'):
        verbose = True

if 'MERAKI_APIKEY' in os.environ:
    apikey = os.environ['MERAKI_APIKEY']

if len(apikey) < 1:
    print("Missing apikey")
    sys.exit(2)

organizations = getOrganizations(apikey)
for organization in organizations:
    if verbose:
        print "Organization: %s" % (organization['name'])
    networks = getNetworks(apikey, organization['id'])
    for network in networks:
        if verbose:
            print "Network: %s" % (network['name'])

        devices = getDevices(apikey, network['id'])
        network['devices'] = devices
        for device in devices:
            if verbose:
                print " Device: %s" % (device['name'])
            uplink = getDeviceUplink(apikey, network['id'], device['serial'])
            device['uplink'] = uplink

        if not device['model'].startswith('MV'):
            alertSettings = getAlertSettings(apikey, network['id'])
            network['alertSettings'] = alertSettings

            vlans = getVlans(apikey, network['id'])
            network['vlans'] = vlans

            vlansEnabledState = getVlansEnabledState(apikey, network['id'])
            network['vlansEnabledState'] = vlansEnabledState

            firewalledServices = getFirewalledServices(apikey, network['id'])
            network['firewalledServices'] = firewalledServices

            staticRoutes = getStaticRoutes(apikey, network['id'])
            network['staticRoutes'] = staticRoutes

            siteToSiteVpn = getSiteToSiteVpn(apikey, network['id'])
            network['siteToSiteVpn'] = siteToSiteVpn

            l3FirewallRules = getL3FirewallRules(apikey, network['id'])
            network['l3FirewallRules'] = l3FirewallRules

            groupPolicies = getGroupPolicies(apikey, network['id'])
            network['groupPolicies'] = groupPolicies

            ssids = getSsids(apikey, network['id'])
            network['ssids'] = ssids

            syslogServers = getSyslogServers(apikey, network['id'])
            network['syslogServers'] = syslogServers

            contentFiltering = getContentFiltering(apikey, network['id'])
            network['contentFiltering'] = contentFiltering

    organization['networks']=networks

    vpnFirewallRules = getVpnFirewallRules(apikey, organization['id'])
    organization['vpnFirewallRules']=vpnFirewallRules

    snmp = getSnmp(apikey, organization['id'])
    organization['snmp']=snmp

    thirdPartyVPNPeers = getThirdPartyVPNPeers(apikey, organization['id'])
    organization['thirdPartyVPNPeers']=thirdPartyVPNPeers

    samlRoles = getSamlRoles(apikey, organization['id'])
    organization['samlRoles']=samlRoles

if len(output_filename):
    file = open(output_filename, "w")
    file.write(json.dumps(organizations, indent=2, sort_keys=True))
    file.close()
    if verbose:
        print "Wrote output to %s" % (output_filename)
else:
    print json.dumps(organizations, indent=2, sort_keys=True)
