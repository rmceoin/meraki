#!/usr/bin/python3

#
# Use the Meraki Dashboard API to get any available configurations
# and output as a single JSON object
#

import getopt, sys, os
import json
import requests

verbose = False
apikey = ''
orgid = ''
configfile = '/usr/local/etc/meraki.yaml'
output_filename = ''

def getJson(key, url):

    headers = {}
    headers['Content-Type'] = 'application/json'
    headers['X-Cisco-Meraki-API-Key'] = key

    try:
        r = requests.get(url, headers=headers)
    except requests.exceptions.RequestException as e:
        print("Error: %s" % (e))
        return False

    if verbose:
        print("r.status_code = %s" % (r.status_code))
        print("r.text = %s" % (r.text))

    if r.status_code == 400:
        if verbose:
            print("400 Bad request: %s : %s" % (url, r.text))
        return False
    if r.status_code == 404:
        if verbose:
            print("404 Not found: %s" % (url))
        return False
    if r.status_code != 200:
        print("Error: %s - %s" % (r.status_code, r.text))
        return False

    data = json.loads(r.text)

    return data

def getOrganizations(key):
    url = "https://dashboard.meraki.com/api/v0/organizations"
    return getJson(key, url)

def getVpnFirewallRules(key, orgid):
    url = "https://dashboard.meraki.com/api/v0/organizations/%s/vpnFirewallRules" % (orgid)
    return getJson(key, url)

def getNetworks(key, orgid):
    url = "https://dashboard.meraki.com/api/v0/organizations/%s/networks" % (orgid)
    return getJson(key, url)

def getVlans(key, networkId):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/vlans" % (networkId)
    return getJson(key, url)

def getStaticRoutes(key, networkId):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/staticRoutes" % (networkId)
    return getJson(key, url)

def getSiteToSiteVpn(key, networkId):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/siteToSiteVpn" % (networkId)
    return getJson(key, url)

def getL3FirewallRules(key, networkId):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/l3FirewallRules" % (networkId)
    return getJson(key, url)

def getSsids(key, networkId):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/ssids" % (networkId)
    return getJson(key, url)

def getGroupPolicies(key, networkId):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/groupPolicies" % (networkId)
    return getJson(key, url)

def getDevices(key, networkId):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/devices" % (networkId)
    return getJson(key, url)

def getDeviceUplink(key, networkId, serial):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/devices/%s/uplink" % (networkId, serial)
    return getJson(key, url)

def getSnmp(key, organizationId):
    url = "https://dashboard.meraki.com/api/v0/organizations/%s/snamp" % (organizationId)
    return getJson(key, url)

def getThirdPartyVPNPeers(key, organizationId):
    url = "https://dashboard.meraki.com/api/v0/organizations/%s/thirdPartyVPNPeers" % (organizationId)
    return getJson(key, url)

def getSamlRoles(key, organizationId):
    url = "https://dashboard.meraki.com/api/v0/organizations/%s/samlRoles" % (organizationId)
    return getJson(key, url)

if 'MERAKI_APIKEY' in os.environ:
    apikey = os.environ['MERAKI_APIKEY']
if 'MERAKI_ORGID' in os.environ:
    orgid = os.environ['MERAKI_ORGID']

options, remainder = getopt.getopt(sys.argv[1:], 'o:v', ['apikey=', 'orgid=', 'output=', 
                                                         'verbose',
                                                         ])
for opt, arg in options:
    if opt in ('-o', '--output'):
        output_filename = arg
    elif opt in ('--apikey'):
        apikey = arg
    elif opt in ('--orgid'):
        orgid = arg
    elif opt in ('-v', '--verbose'):
        verbose = True

if os.path.isfile(configfile):
    with open(configfile) as fp:
        configuration = yaml.load(fp)
        if 'apikey' in configuration:
            apikey = configuration['apikey']
        if 'orgid' in configuration:
            orgid = configuration['orgid']

if len(apikey) < 1:
    print("Missing apikey")
    sys.exit(3)

organizations = getOrganizations(apikey)
for organization in organizations:
    if verbose:
        print("Organization: %s" % (organization['name']))
    if len(orgid) and (organization['id'] == orgid):
        continue
    networks = getNetworks(apikey, organization['id'])
    for network in networks:
        if verbose:
            print("Network: %s" % (network['name']))

        devices = getDevices(apikey, network['id'])
        network['devices'] = devices
        for device in devices:
            if verbose:
                print(" Device: %s" % (device['name']))
            uplink = getDeviceUplink(apikey, network['id'], device['serial'])
            device['uplink'] = uplink

        vlans = getVlans(apikey, network['id'])
        network['vlans'] = vlans

        staticRoutes = getStaticRoutes(apikey, network['id'])
        network['staticRoutes'] = staticRoutes

        siteToSiteVpn = getSiteToSiteVpn(apikey, network['id'])
        network['siteToSiteVpn'] = siteToSiteVpn

        l3FirewallRules = getL3FirewallRules(apikey, network['id'])
        network['l3FirewallRules'] = l3FirewallRules

        groupPolicies = getGroupPolicies(apikey, network['id'])
        network['groupPolicies'] = groupPolicies

        ssids = getSsids(apikey, network['id'])
        network['ssids'] = ssids

    organization['networks']=networks

    vpnFirewallRules = getVpnFirewallRules(apikey, organization['id'])
    organization['vpnFirewallRules']=vpnFirewallRules

    snmp = getSnmp(apikey, organization['id'])
    organization['snmp']=snmp

    thirdPartyVPNPeers = getThirdPartyVPNPeers(apikey, organization['id'])
    organization['thirdPartyVPNPeers']=thirdPartyVPNPeers

    samlRoles = getSamlRoles(apikey, organization['id'])
    organization['samlRoles']=samlRoles

if len(output_filename):
    file = open(output_filename, "w")
    file.write(json.dumps(organizations, indent=2, sort_keys=True))
    file.close()
    if verbose:
        print("Wrote output to %s" % (output_filename))
else:
    print(json.dumps(organizations, indent=2, sort_keys=True))
