#!/usr/bin/env python3

"""
merakibackup.py

Iterates through all organizations and networks visable to the APIKEY,
retreives data from all known API endpoints and then outputs as
a single JSON array.

Before running the script, it's best to put the APIKEY
into the MERAKI_APIKEY environment variable.  Otherwise
use the less security --apikey option.

export MERAKI_APIKEY="the_api_key_here"

curl -s -L -H "X-Cisco-Meraki-API-Key: $apikey" -X GET \
 -H 'Content-Type: application/json' 'https://dashboard.meraki.com/api/v0/organizations' | jq '.'

"""

import getopt
import json
import os
import sys
from httplib2 import Http, HttpLib2Error

DEBUG = False
apikey = ''
verbose = False
output_filename = ''

def getJson(key: str, url: str, okay_code: int = None) -> dict:
    try:
        message_headers = {
            'Content-Type': 'application/json; charset=UTF-8',
            'X-Cisco-Meraki-API-Key': key
        }

        http_obj = Http()

        response = http_obj.request(
            uri=url,
            method='GET',
            headers=message_headers,
        )
    except HttpLib2Error as exception:
        print("Exception getting {} with error code {}".format(url, exception))
        return None

    headers = response[0]
    if headers.status != 200:
        if okay_code and okay_code == headers.status:
            return None
        if verbose:
            print("Failed getting {} with error code {}".format(url, headers.status))
        return None

    data = json.loads(response[1])
    if len(data) == 0:
        if DEBUG:
            print("Empty response for {}".format(url))
        return None
    return data

def getOrganizations(key: str) -> dict:
    url = "https://dashboard.meraki.com/api/v0/organizations"
    return getJson(key, url)

def getNetworks(key: str, orgid: str) -> dict:
    url = "https://dashboard.meraki.com/api/v0/organizations/%s/networks" % (orgid)
    return getJson(key, url)

def getAlertSettings(key: str, networkId: str) -> dict:
    url = "https://dashboard.meraki.com/api/v0/networks/%s/alertSettings" % (networkId)
    return getJson(key, url)

def getConnectivityMonitoringDestinations(key: str, networkId: str) -> dict:
    url = "https://dashboard.meraki.com/api/v0/networks/%s/connectivityMonitoringDestinations" % (networkId)
    return getJson(key, url, 400)

def getContentFiltering(key: str, networkId: str) -> dict:
    url = "https://dashboard.meraki.com/api/v0/networks/%s/contentFiltering" % (networkId)
    return getJson(key, url, 400)

def getBrandingPolicies(key: str, orgid: str) -> dict:
    url = "https://dashboard.meraki.com/api/v0/organizations/%s/brandingPolicies" % (orgid)
    return getJson(key, url, 400)

def getVpnFirewallRules(key: str, orgid: str) -> dict:
    url = "https://dashboard.meraki.com/api/v0/organizations/%s/vpnFirewallRules" % (orgid)
    return getJson(key, url)

def getOneToOneNatRules(key: str, networkId: str) -> dict:
    url = "https://dashboard.meraki.com/api/v0/networks/%s/oneToOneNatRules" % (networkId)
    return getJson(key, url, 400)

def getOneToManyNatRules(key: str, networkId: str) -> dict:
    url = "https://dashboard.meraki.com/api/v0/networks/%s/oneToManyNatRules" % (networkId)
    return getJson(key, url, 400)

def getPortForwardingRules(key: str, networkId: str) -> dict:
    url = "https://dashboard.meraki.com/api/v0/networks/%s/oneToManyNatRules" % (networkId)
    return getJson(key, url)

def getVlans(key: str, networkId: str) -> dict:
    url = "https://dashboard.meraki.com/api/v0/networks/%s/vlans" % (networkId)
    return getJson(key, url, 400)

def getVlansEnabledState(key: str, networkId: str) -> dict:
    url = "https://dashboard.meraki.com/api/v0/networks/%s/vlansEnabledState" % (networkId)
    return getJson(key, url, 400)

def getStaticRoutes(key: str, networkId: str) -> dict:
    url = "https://dashboard.meraki.com/api/v0/networks/%s/staticRoutes" % (networkId)
    return getJson(key, url, 400)

def getSiteToSiteVpn(key: str, networkId: str) -> dict:
    url = "https://dashboard.meraki.com/api/v0/networks/%s/siteToSiteVpn" % (networkId)
    return getJson(key, url, 404)

def getL3FirewallRules(key: str, networkId: str) -> dict:
    url = "https://dashboard.meraki.com/api/v0/networks/%s/l3FirewallRules" % (networkId)
    return getJson(key, url, 404)

def getL7FirewallRules(key, networkId):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/l7FirewallRules" % (networkId)
    return getJson(key, url)

def getL7ApplicationCategories(key, networkId):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/l7FirewallRules/applicationCategories" % (networkId)
    return getJson(key, url)

def getMalwareSettings(key, networkId):
    url = "https://dashboard.meraki.com/api/v0/networks/%s/security/malwareSettings" % (networkId)
    return getJson(key, url)

def getSsids(key: str, networkId: str) -> dict:
    url = "https://dashboard.meraki.com/api/v0/networks/%s/ssids" % (networkId)
    return getJson(key, url, 404)

def getGroupPolicies(key: str, networkId: str) -> dict:
    url = "https://dashboard.meraki.com/api/v0/networks/%s/groupPolicies" % (networkId)
    return getJson(key, url)

def getDevices(key: str, networkId: str) -> dict:
    url = "https://dashboard.meraki.com/api/v0/networks/%s/devices" % (networkId)
    return getJson(key, url)

def getDeviceUplink(key: str, networkId: str, serial: str) -> dict:
    url = "https://dashboard.meraki.com/api/v0/networks/%s/devices/%s/uplink" % (networkId, serial)
    return getJson(key, url)

def getFirewalledServices(key: str, networkId: str) -> dict:
    url = "https://dashboard.meraki.com/api/v0/networks/%s/firewalledServices" % (networkId)
    return getJson(key, url, 400)

def getSnmp(key: str, organizationId: str) -> dict:
    url = "https://dashboard.meraki.com/api/v0/organizations/%s/snmp" % (organizationId)
    return getJson(key, url)

def getThirdPartyVPNPeers(key: str, organizationId: str) -> dict:
    url = "https://dashboard.meraki.com/api/v0/organizations/%s/thirdPartyVPNPeers" % (organizationId)
    return getJson(key, url)

def getSyslogServers(key: str, networkId: str) -> dict:
    url = "https://dashboard.meraki.com/api/v0/networks/%s/syslogServers" % (networkId)
    return getJson(key, url)

def getSamlRoles(key: str, organizationId: str) -> dict:
    url = "https://dashboard.meraki.com/api/v0/organizations/%s/samlRoles" % (organizationId)
    return getJson(key, url)

options, remainder = getopt.getopt(sys.argv[1:], 'a:o:v', [
    'output=',
    'apikey=',
    'verbose',
    ])
for opt, arg in options:
    if opt in ('-o', '--output'):
        output_filename = arg
    elif opt in ('-a', '--apikey'):
        apikey = arg
    elif opt in ('-v', '--verbose'):
        verbose = True

if 'MERAKI_APIKEY' in os.environ:
    apikey = os.environ['MERAKI_APIKEY']

if not apikey:
    print("Missing apikey")
    sys.exit(2)

organizations = getOrganizations(apikey)
for organization in organizations:
    if verbose:
        print("Organization: {}".format(organization['name']))
    networks = getNetworks(apikey, organization['id'])
    if networks:
        for network in networks:
            if verbose:
                print("Network: {}".format(network['name']))

            devices = getDevices(apikey, network['id'])
            network['devices'] = devices
            if devices:
                for device in devices:
                    device_name = None
                    if 'name' in device:
                        device_name = device['name']
                    if verbose:
                        print(" Device: {}".format(device_name))
                    uplink = getDeviceUplink(apikey, network['id'], device['serial'])
                    device['uplink'] = uplink

                    if device['model'].startswith('MX') or device['model'].startswith('Z'):
                        alertSettings = getAlertSettings(apikey, network['id'])
                        network['alertSettings'] = alertSettings

                        connectivityMonitoringDestinations = getConnectivityMonitoringDestinations(apikey, network['id'])
                        network['connectivityMonitoringDestinations'] = connectivityMonitoringDestinations

                        vlans = getVlans(apikey, network['id'])
                        network['vlans'] = vlans

                        vlansEnabledState = getVlansEnabledState(apikey, network['id'])
                        network['vlansEnabledState'] = vlansEnabledState

                        firewalledServices = getFirewalledServices(apikey, network['id'])
                        network['firewalledServices'] = firewalledServices

                        staticRoutes = getStaticRoutes(apikey, network['id'])
                        network['staticRoutes'] = staticRoutes

                        siteToSiteVpn = getSiteToSiteVpn(apikey, network['id'])
                        network['siteToSiteVpn'] = siteToSiteVpn

                        l3FirewallRules = getL3FirewallRules(apikey, network['id'])
                        network['l3FirewallRules'] = l3FirewallRules

                        groupPolicies = getGroupPolicies(apikey, network['id'])
                        network['groupPolicies'] = groupPolicies

                        l7ApplicationCategories = getL7ApplicationCategories(apikey, network['id'])
                        network['l7ApplicationCategories'] = l7ApplicationCategories

                        ssids = getSsids(apikey, network['id'])
                        network['ssids'] = ssids

                        syslogServers = getSyslogServers(apikey, network['id'])
                        network['syslogServers'] = syslogServers

                        contentFiltering = getContentFiltering(apikey, network['id'])
                        network['contentFiltering'] = contentFiltering

                        oneToOneNatRules = getOneToOneNatRules(apikey, network['id'])
                        network['oneToOneNatRules'] = oneToOneNatRules

                        oneToManyNatRules = getOneToManyNatRules(apikey, network['id'])
                        network['oneToManyNatRules'] = oneToManyNatRules

                        portForwardingRules = getPortForwardingRules(apikey, network['id'])
                        network['portForwardingRules'] = portForwardingRules

    organization['networks'] = networks

    brandingPolicies = getBrandingPolicies(apikey, organization['id'])
    organization['brandingPolicies'] = brandingPolicies

    vpnFirewallRules = getVpnFirewallRules(apikey, organization['id'])
    organization['vpnFirewallRules'] = vpnFirewallRules

    snmp = getSnmp(apikey, organization['id'])
    organization['snmp'] = snmp

    thirdPartyVPNPeers = getThirdPartyVPNPeers(apikey, organization['id'])
    organization['thirdPartyVPNPeers'] = thirdPartyVPNPeers

    samlRoles = getSamlRoles(apikey, organization['id'])
    organization['samlRoles'] = samlRoles

if output_filename:
    file = open(output_filename, "w")
    file.write(json.dumps(organizations, indent=2, sort_keys=True))
    file.close()
    if verbose:
        print("Wrote output to {}".format(output_filename))
else:
    print("{}".format(json.dumps(organizations, indent=2, sort_keys=True)))
